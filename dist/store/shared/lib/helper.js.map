{"version":3,"sources":["../../../../src/store/shared/lib/helper.js"],"names":["formatNumber","number","settings","x","re","decimal_number","num","toFixed","Math","max","decimal_separator","replace","RegExp","thousand_separator","amountPattern","formatCurrency","currency_format","getThumbnailUrl","originalUrl","width","length","pos","lastIndexOf","thumbnailUrl","substring","getParentIds","categories","categoryId","parentIds","parentExists","category","find","item","id","parent_id","push"],"mappings":";;;AAAO,IAAMA,sCAAe,SAAfA,YAAe,GAA0B;AAAA,KAAzBC,MAAyB,uEAAhB,CAAgB;AAAA,KAAbC,QAAa;;AACrD,KAAMC,IAAI,CAAV;;AAEA,KAAMC,KACL,gBACAD,CADA,GAEA,KAFA,IAGCD,SAASG,cAAT,GAA0B,CAA1B,GAA8B,KAA9B,GAAsC,GAHvC,IAIA,GALD;;AAOA,KAAIC,MAAM,CAACL,UAAU,CAAX,EAAcM,OAAd,CAAsBC,KAAKC,GAAL,CAAS,CAAT,EAAY,CAAC,CAACP,SAASG,cAAvB,CAAtB,CAAV;;AAEA,QAAO,CAACH,SAASQ,iBAAT,GACLJ,IAAIK,OAAJ,CAAY,GAAZ,EAAiBT,SAASQ,iBAA1B,CADK,GAELJ,GAFI,EAGLK,OAHK,CAGG,IAAIC,MAAJ,CAAWR,EAAX,EAAe,GAAf,CAHH,EAGwB,OAAOF,SAASW,kBAHxC,CAAP;AAIA,CAhBM;;AAkBP,IAAMC,gBAAgB,UAAtB;AACO,IAAMC,0CAAiB,SAAjBA,cAAiB,GAA0B;AAAA,KAAzBd,MAAyB,uEAAhB,CAAgB;AAAA,KAAbC,QAAa;;AACvD,QAAOA,SAASc,eAAT,CAAyBL,OAAzB,CACNG,aADM,EAENd,aAAaC,MAAb,EAAqBC,QAArB,CAFM,CAAP;AAIA,CALM;;AAOA,IAAMe,4CAAkB,SAAlBA,eAAkB,CAACC,WAAD,EAAcC,KAAd,EAAwB;AACtD,KAAID,eAAeA,YAAYE,MAAZ,GAAqB,CAAxC,EAA2C;AAC1C,MAAMC,MAAMH,YAAYI,WAAZ,CAAwB,GAAxB,CAAZ;AACA,MAAMC,eACLL,YAAYM,SAAZ,CAAsB,CAAtB,EAAyBH,GAAzB,WACIF,KADJ,UAEAD,YAAYM,SAAZ,CAAsBH,MAAM,CAA5B,CAHD;AAIA,SAAOE,YAAP;AACA,EAPD,MAOO;AACN,SAAO,EAAP;AACA;AACD,CAXM;;AAaA,IAAME,sCAAe,SAAfA,YAAe,CAACC,UAAD,EAAaC,UAAb,EAA4B;AACvD,KAAIC,YAAY,EAAhB;AACA,KAAIC,eAAe,KAAnB;;AAEA,IAAG;AACF,MAAMC,WAAWJ,WAAWK,IAAX,CAAgB;AAAA,UAAQC,KAAKC,EAAL,KAAYN,UAApB;AAAA,GAAhB,CAAjB;AACAE,iBAAeC,YAAYA,SAASI,SAApC;AACA,MAAIL,YAAJ,EAAkB;AACjBD,aAAUO,IAAV,CAAeL,SAASI,SAAxB;AACAP,gBAAaG,SAASI,SAAtB;AACA;AACD,EAPD,QAOSL,YAPT;;AASA,QAAOD,SAAP;AACA,CAdM","file":"helper.js","sourcesContent":["export const formatNumber = (number = 0, settings) => {\n\tconst x = 3;\n\n\tconst re =\n\t\t'\\\\d(?=(\\\\d{' +\n\t\tx +\n\t\t'})+' +\n\t\t(settings.decimal_number > 0 ? '\\\\D' : '$') +\n\t\t')';\n\n\tlet num = (number || 0).toFixed(Math.max(0, ~~settings.decimal_number));\n\n\treturn (settings.decimal_separator\n\t\t? num.replace('.', settings.decimal_separator)\n\t\t: num\n\t).replace(new RegExp(re, 'g'), '$&' + settings.thousand_separator);\n};\n\nconst amountPattern = '{amount}';\nexport const formatCurrency = (number = 0, settings) => {\n\treturn settings.currency_format.replace(\n\t\tamountPattern,\n\t\tformatNumber(number, settings)\n\t);\n};\n\nexport const getThumbnailUrl = (originalUrl, width) => {\n\tif (originalUrl && originalUrl.length > 0) {\n\t\tconst pos = originalUrl.lastIndexOf('/');\n\t\tconst thumbnailUrl =\n\t\t\toriginalUrl.substring(0, pos) +\n\t\t\t`/${width}/` +\n\t\t\toriginalUrl.substring(pos + 1);\n\t\treturn thumbnailUrl;\n\t} else {\n\t\treturn '';\n\t}\n};\n\nexport const getParentIds = (categories, categoryId) => {\n\tlet parentIds = [];\n\tlet parentExists = false;\n\n\tdo {\n\t\tconst category = categories.find(item => item.id === categoryId);\n\t\tparentExists = category && category.parent_id;\n\t\tif (parentExists) {\n\t\t\tparentIds.push(category.parent_id);\n\t\t\tcategoryId = category.parent_id;\n\t\t}\n\t} while (parentExists);\n\n\treturn parentIds;\n};\n"]}