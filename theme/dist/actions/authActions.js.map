{"version":3,"sources":["../../src/actions/authActions.js"],"names":["registerUser","userData","history","restClient","post","then","push","catch","dispatch","type","payload","err","response","data","loginUser","token","res","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":";;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;AACO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,QAAuB,oBAAY;AAC9D,gBAAIC,UAAJ,CACEC,IADF,CACO,iBADP,EAC0BH,QAD1B,EAEEI,IAFF,CAEO;AAAA,UAAOH,QAAQI,IAAR,CAAa,QAAb,CAAP;AAAA,GAFP,EAGEC,KAHF,CAGQ;AAAA,UACNC,SAAS;AACRC,qCADQ;AAERC,aAASC,IAAIC,QAAJ,CAAaC;AAFd,IAAT,CADM;AAAA,GAHR;AASA,EAV2B;AAAA,CAArB;;AAYP;AACO,IAAMC,gCAAY,SAAZA,SAAY;AAAA,QAAY,oBAAY;AAChD,gBAAIX,UAAJ,CACEC,IADF,CACO,cADP,EACuBH,QADvB,EAEEI,IAFF,CAEO,eAAO;AACZ;;AAEA;AAHY,OAIJU,KAJI,GAIMC,IAAIH,IAJV,CAIJE,KAJI;;AAKZE,gBAAaC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACA;AACA,+BAAaA,KAAb;AACA;AACA,OAAMI,UAAU,yBAAWJ,KAAX,CAAhB;AACA;AACAP,YAASY,eAAeD,OAAf,CAAT;AACA,GAdF,EAeEZ,KAfF,CAeQ;AAAA,UAAOC,SAAS,EAAEC,iCAAF,EAAoBC,SAASC,IAAIC,QAAJ,CAAaC,IAA1C,EAAT,CAAP;AAAA,GAfR;AAgBA,EAjBwB;AAAA,CAAlB;;AAmBP;AACO,IAAMO,0CAAiB,SAAjBA,cAAiB,UAAW;AACxC,QAAO;AACNX,yCADM;AAENC,WAASS;AAFH,EAAP;AAIA,CALM;;AAOP;AACO,IAAME,0CAAiB,SAAjBA,cAAiB,GAAM;AACnC,QAAO;AACNZ;AADM,EAAP;AAGA,CAJM;;AAMP;AACO,IAAMa,kCAAa,SAAbA,UAAa;AAAA,QAAM,oBAAY;AAC3C;AACAL,eAAaM,UAAb,CAAwB,UAAxB;AACA;AACA,8BAAa,KAAb;AACA;AACAf,WAASY,eAAe,EAAf,CAAT;AACA,EAPyB;AAAA,CAAnB","file":"authActions.js","sourcesContent":["import api from '../lib/api';\nimport setAuthToken from '../lib/utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './authActiontypes';\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n\tapi.restClient\n\t\t.post('/users/register', userData)\n\t\t.then(res => history.push('/login'))\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n\tapi.restClient\n\t\t.post('/users/login', userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem('jwtToken', token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tdispatch(setCurrentUser(decoded));\n\t\t})\n\t\t.catch(err => dispatch({ type: GET_ERRORS, payload: err.response.data }));\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_USER,\n\t\tpayload: decoded\n\t};\n};\n\n// User loading\nexport const setUserLoading = () => {\n\treturn {\n\t\ttype: USER_LOADING\n\t};\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n\t// Remove token from local storage\n\tlocalStorage.removeItem('jwtToken');\n\t// Remove auth header for future requests\n\tsetAuthToken(false);\n\t// Set current user to empty object {} which will set isAuthenticated to false\n\tdispatch(setCurrentUser({}));\n};\n"]}