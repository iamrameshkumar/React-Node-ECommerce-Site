{"version":3,"sources":["../../src/actions/authActions.js"],"names":["registerUser","userData","history","restClient","post","then","res","code","catch","dispatch","type","payload","err","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":";;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;AACO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,QAAuB,oBAAY;AAC9D,gBAAIC,UAAJ,CACEC,IADF,CACO,iBADP,EAC0BH,QAD1B,EAEEI,IAFF,CAEO,eAAO;AACZ,UAAOC,IAAIC,IAAX;AACA,GAJF,EAKEC,KALF,CAKQ,eAAO;AACbC,YAAS,EAAEC,iCAAF,EAAoBC,SAASC,IAAIC,QAAJ,CAAaC,IAA1C,EAAT;AACA,UAAOR,IAAIC,IAAX;AACA,GARF;AASA,EAV2B;AAAA,CAArB;;AAYP;AACO,IAAMQ,gCAAY,SAAZA,SAAY;AAAA,QAAY,oBAAY;AAChD,gBAAIZ,UAAJ,CACEC,IADF,CACO,cADP,EACuBH,QADvB,EAEEI,IAFF,CAEO,eAAO;AACZ;;AAEA;AAHY,OAIJW,KAJI,GAIMV,IAAIQ,IAJV,CAIJE,KAJI;;AAKZC,gBAAaC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACA;AACA,+BAAaA,KAAb;AACA;AACA,OAAMG,UAAU,yBAAWH,KAAX,CAAhB;AACA;AACAP,YAASW,eAAeD,OAAf,CAAT;AACA,UAAOb,IAAIC,IAAX;AACA,GAfF,EAgBEC,KAhBF,CAgBQ,eAAO;AACbC,YAAS,EAAEC,iCAAF,EAAoBC,SAASC,IAAIC,QAAJ,CAAaC,IAA1C,EAAT;AACA,UAAOR,IAAIC,IAAX;AACA,GAnBF;AAoBA,EArBwB;AAAA,CAAlB;;AAuBP;AACO,IAAMa,0CAAiB,SAAjBA,cAAiB,UAAW;AACxC,QAAO;AACNV,yCADM;AAENC,WAASQ;AAFH,EAAP;AAIA,CALM;;AAOP;AACO,IAAME,0CAAiB,SAAjBA,cAAiB,GAAM;AACnC,QAAO;AACNX;AADM,EAAP;AAGA,CAJM;;AAMP;AACO,IAAMY,kCAAa,SAAbA,UAAa;AAAA,QAAM,oBAAY;AAC3C;AACAL,eAAaM,UAAb,CAAwB,UAAxB;AACA;AACA,8BAAa,KAAb;AACA;AACAd,WAASW,eAAe,EAAf,CAAT;AACA,EAPyB;AAAA,CAAnB","file":"authActions.js","sourcesContent":["import api from '../lib/api';\nimport setAuthToken from '../lib/utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './authActiontypes';\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n\tapi.restClient\n\t\t.post('/users/register', userData)\n\t\t.then(res => {\n\t\t\treturn res.code;\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({ type: GET_ERRORS, payload: err.response.data });\n\t\t\treturn res.code;\n\t\t});\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n\tapi.restClient\n\t\t.post('/users/login', userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem('jwtToken', token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tdispatch(setCurrentUser(decoded));\n\t\t\treturn res.code;\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({ type: GET_ERRORS, payload: err.response.data });\n\t\t\treturn res.code;\n\t\t});\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_USER,\n\t\tpayload: decoded\n\t};\n};\n\n// User loading\nexport const setUserLoading = () => {\n\treturn {\n\t\ttype: USER_LOADING\n\t};\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n\t// Remove token from local storage\n\tlocalStorage.removeItem('jwtToken');\n\t// Remove auth header for future requests\n\tsetAuthToken(false);\n\t// Set current user to empty object {} which will set isAuthenticated to false\n\tdispatch(setCurrentUser({}));\n};\n"]}