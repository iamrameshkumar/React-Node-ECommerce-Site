{"version":3,"sources":["../../src/actions/authActions.js"],"names":["AuthActions","setCurrentUser","type","payload","decoded","setUserLoading","logoutUser","localStorage","removeItem","dispatch","registerUser","userData","history","restClient","post","response","loginUser","status","token","json","setItem"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;IACMA,W;;;;OA4BLC,c,GAAiB,mBAAW;AAC3B,UAAO;AACNC,2CADM;AAENC,aAASC;AAFH,IAAP;AAIA,G;;OAGDC,c,GAAiB,YAAM;AACtB,UAAO;AACNH;AADM,IAAP;AAGA,G;;OAGDI,U,GAAa;AAAA,UAAM,oBAAY;AAC9B;AACAC,iBAAaC,UAAb,CAAwB,UAAxB;AACA;AACA,gCAAa,KAAb;AACA;AACAC,aAASR,eAAe,EAAf,CAAT;AACA,IAPY;AAAA,G;;;AA1Cb;uBACMS,Y;uGAAaC,Q,EAAUC,O;;;;;;;cACP,cAAIC,UAAJ,CAAeC,IAAf,CAAoB,iBAApB,EAAuCH,QAAvC,C;;;AAAjBI,e;wCACGA,Q;;;;;;;;;;;;;;;;;AAGR;;;uBACMC,S;yGAAUL,Q;;;;;;AACXI,e,GAAW,cAAIF,UAAJ,CAAeC,IAAf,CAAoB,cAApB,EAAoCH,QAApC,C;;AACf,WAAII,QAAJ,EAAc;AACb;AACA,YAAI,QAAQA,SAASE,MAArB,EAA6B;AAC5B;AACQC,cAFoB,GAEVH,SAASI,IAAT,CAAcD,KAFJ,CAEpBA,KAFoB;;AAG5BX,sBAAaa,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACA;AACA,qCAAaA,KAAb;AACA;AACMd,gBAPsB,GAOZ,yBAAWc,KAAX,CAPY;AAQ5B;;AACAT,kBAASR,eAAeG,OAAf,CAAT;AACA;AACD;yCACMW,Q;;;;;;;;;;;;;;;;;AAGR;;;AAQA;;;AAOA;;;;;;kBAWc,IAAIf,WAAJ,E","file":"authActions.js","sourcesContent":["import api from '../lib/api';\nimport setAuthToken from '../lib/utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './authActiontypes';\nclass AuthActions {\n\t// Register User\n\tasync registerUser(userData, history) {\n\t\tlet response = await api.restClient.post('/users/register', userData);\n\t\treturn response;\n\t}\n\n\t// Login - get user token\n\tasync loginUser(userData) {\n\t\tlet response = api.restClient.post('/users/login', userData);\n\t\tif (response) {\n\t\t\t// Save to localStorage\n\t\t\tif (200 === response.status) {\n\t\t\t\t// Set token to localStorage\n\t\t\t\tconst { token } = response.json.token;\n\t\t\t\tlocalStorage.setItem('jwtToken', token);\n\t\t\t\t// Set token to Auth header\n\t\t\t\tsetAuthToken(token);\n\t\t\t\t// Decode token to get user data\n\t\t\t\tconst decoded = jwt_decode(token);\n\t\t\t\t// Set current user\n\t\t\t\tdispatch(setCurrentUser(decoded));\n\t\t\t}\n\t\t}\n\t\treturn response;\n\t}\n\n\t// Set logged in user\n\tsetCurrentUser = decoded => {\n\t\treturn {\n\t\t\ttype: SET_CURRENT_USER,\n\t\t\tpayload: decoded\n\t\t};\n\t};\n\n\t// User loading\n\tsetUserLoading = () => {\n\t\treturn {\n\t\t\ttype: USER_LOADING\n\t\t};\n\t};\n\n\t// Log user out\n\tlogoutUser = () => dispatch => {\n\t\t// Remove token from local storage\n\t\tlocalStorage.removeItem('jwtToken');\n\t\t// Remove auth header for future requests\n\t\tsetAuthToken(false);\n\t\t// Set current user to empty object {} which will set isAuthenticated to false\n\t\tdispatch(setCurrentUser({}));\n\t};\n}\n\nexport default new AuthActions();"]}